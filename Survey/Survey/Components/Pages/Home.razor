@page "/"
@using Survey.Repositories
@using Survey.Models
@inject NavigationManager Navigation
@inject ClipboardService ClipboardService
@inject TooltipService TooltipService

@rendermode InteractiveServer
@inject ISurveyRepository DbRepository

@if (surveys is null)
{
    <div class="row my-1">
        <div class="col-sm-5 col-lg">
            <RadzenCard>
                <RadzenText Text="Admin Page Loading....." TextStyle="TextStyle.H6"/>
            </RadzenCard>
        </div>
    </div>

    <div class="row my-3">
        <RadzenCard>

            <div class="col-sm-12 col-lg-2">
                    <RadzenStack>
                        <RadzenText TextStyle="TextStyle.H4" Style="color: white; background: black; text-align: center">Title</RadzenText>
                    </RadzenStack>
            </div>
        </RadzenCard>
    </div>
}

else
{
    <div class="row my-3 col-lg">
        <RadzenCard>
            <RadzenText Text="Admin Page" TextStyle="TextStyle.H6"/>
        </RadzenCard>
    </div>
    
    <div class="row my-3">
        <div class="col text-end">
            <RadzenButton Click=@OnClickNewForm Text="NewForm" Size="ButtonSize.Medium" />
        </div>
    </div>

    <div class="row my-3">
        <RadzenDataGrid @ref="surveyGrid" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5"
                        Data="@surveys" TItem="SurveyForm" Count="@surveysCount" LoadData="@LoadSurveys">
            <Columns>
                <RadzenDataGridColumn TItem="SurveyForm" Title="No.">
                    <Template Context="survey">
                        @{
                            int columIndex = Array.IndexOf(surveys, survey) + 1;
                        }
                        @columIndex
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(SurveyForm.Title)" Title="Title"/>
                <RadzenDataGridColumn Property="@nameof(SurveyForm.CreateTime)" Title="CreateAt"/>
                <RadzenDataGridColumn Property="@nameof(SurveyForm.Constructor)" Title="Manager"/>
                <RadzenDataGridColumn Context="survey" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="survey">
                        <NavLink class="btn btn-info" href="@DetailUrl(survey.FormKey)">
                            <i class="bi bi-pencil"></i>
                        </NavLink>
                        <button class="btn btn-secondary" @onclick="@(() => CopyToClipboard(survey.FormKey))">
                            <i class="bi bi-clipboard"></i>
                        </button>
                        @* <Tooltip Text="Hello tooltip"> *@
                        @*     <Button Color="Color.Primary">Hover me</Button> *@
                        @* </Tooltip> *@
                        @* <div class="container"> *@
                        @*     <!-- Button with Tooltip and click event --> *@
                        @*     <div @ref="buttonElement" class="btn btn-primary" @onclick="@(() => CopyToClipboard(survey.FormKey))" *@
                        @*          @onmouseover="@(args => ShowTooltip(buttonElement, "Click me to see a notification"))"> *@
                        @*         copy *@
                        @*     </div> *@
                        @* </div> *@
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>

}

@code
{
    private string statusMessage;

    RadzenDataGrid<SurveyForm> surveyGrid;
    private SurveyForm[]? surveys;
    private int surveysCount;
    private int columIndex = 0;
    private ElementReference buttonElement;

    protected override async Task OnInitializedAsync()
    {
        await LoadSurveys(new LoadDataArgs());
    }

    private async Task LoadSurveys(LoadDataArgs args)
    {
        surveys = (SurveyForm[]?)await DbRepository.GetForms();
        surveysCount = surveys.Length;
        columIndex = 0;
    }
    private string DetailUrl(string key) => $"/form/questioninfo/{key}";


    private void OnClickNewForm()
    {
        Navigation.NavigateTo("/createNew");
    }
    
    async Task CopyToClipboard(string key)
    {
        try
        {
            var baseUri = Navigation.BaseUri;
            var url = $"{baseUri}view/{key}";
            await ClipboardService.WriteTextAsync(url);
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
    private void ShowTooltip(ElementReference elementReference, string key)
    {
        TooltipService.Open(elementReference, $"Copy URL for {key}", new TooltipOptions { Position = TooltipPosition.Top });
    }
    
    [Parameter] public string Tip { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool _isToolTipVisible = false;
    private bool _isMouseOver = false;
    private const int ToolTipDelay = 500;

    private async Task ShowToolTip(MouseEventArgs e)
    {
        _isMouseOver = true;
        await Task.Delay(ToolTipDelay);

        if (_isMouseOver)
        {
            _isToolTipVisible = true;
            StateHasChanged();
        }
    }

    private void HideToolTip(MouseEventArgs e)
    {
        _isMouseOver = false;
        _isToolTipVisible = false;
    }
}
