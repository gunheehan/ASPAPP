@page "/form/info/{key}"
@using Newtonsoft.Json
@using Survey.Models
@using Survey.Repositories

@inject ISurveyRepository DbRepository

@rendermode InteractiveServer

@if (survey is null || questionList is null)
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H1">Loading.....</RadzenText>
    </div>
}
else
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H3">@survey.Title</RadzenText>
    </div>

    <RadzenTabs @bind-SelectedIndex=@selectedIndex>
        <Tabs>
            <RadzenTabsItem Text="Questions">
                <FormInfoDetailView 
                    QuestionList="questionList" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Answers">
                <FormInfoAnswerView 
                    Answers="answerData" 
                    QuestionList="questionList" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Total">
                <FormInfoTotalView 
                    DropdownIndex="dropdownIndex" 
                    Items="items" 
                    SortingData="sortingData" 
                    OnChange="OnChange" />
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
<style>
    .clickable-text {
        cursor: pointer; /* 포인터 커서로 클릭 가능성을 나타냅니다. */
        color: black;  /* 링크 스타일을 위한 색상 */
        display: inline-block; /* 텍스트가 한 줄에 보이도록 설정 */
        font-weight: bold; /* 볼드체로 설정 */
        font-size: 1.2rem; /* 글씨 크기를 키움 */
        font-style: normal;
        transition: color 0.3s, background-color 0.3s; /* 색상과 배경 색상 변경 시 부드러운 전환 효과 추가 */
    }

    .clickable-text:hover {
        color: #0056b3; /* 마우스를 올렸을 때 텍스트 색상 변경 */
        background-color: rgba(0, 123, 255, 0.1); /* 배경색 추가하여 클릭 가능한 부분을 강조 */
        text-decoration: underline; /* 밑줄 유지 */
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .flex-spacer {
        flex-grow: 1;
    }

</style>

@code {
    public class DropdownItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
    
    [Parameter] public string? key { get; set; }

    [SupplyParameterFromForm] private SurveyForm? survey { get; set; }
    private SurveyInfo.Answer[] answerData { get; set; }

    private List<SurveyInfo.QuestionData> questionList = null;
    private int selectedIndex = 0;
    private int dropdownIndex = -1;
    private List<DropdownItem> items = new List<DropdownItem>();
    private Dictionary<int, SurveyInfo.SurveyCategoryTotal> sortingData = new Dictionary<int, SurveyInfo.SurveyCategoryTotal>();

    protected override void OnInitialized()
    {
        selectedIndex = 0;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (key is null)
            return;

        survey = await DbRepository.GetForm(key);

        questionList = JsonConvert.DeserializeObject<List<SurveyInfo.QuestionData>>(survey.Questions);

        IEnumerable<SurveyAnswer> answers = await DbRepository.GetAnswers(key);
        
        answerData = answers.Select(data => new SurveyInfo.Answer
        {
            title = data.Title,
            detail = JsonConvert.DeserializeObject<SurveyInfo.QuestionData[]>(data.Answers),
            user = data.UserId,
            createTime = data.CreateTime.GetValueOrDefault()
        }).ToArray();
        
        SetDropDownItems();
        InitializeSortingData();
    }

    private void SetDropDownItems()
    {
        items.Add(new DropdownItem { Id = -1, Name = "전체" });
        for (int i = 0; i < questionList.Count(); i++)
        {
            items.Add(new DropdownItem { Id = i, Name = questionList[i].question });
        }
    }

    private void InitializeSortingData()
    {
        // for (int i = 0; i < questionList.Length; i++)
        // {
        //     sortingData[i] = new SurveyInfo.SurveyCategoryTotal { title = questionList[i], answer = new Dictionary<string, int>() };
        //     SurveyInfo.Answer newAnswer = new();
        //     newAnswer.title = questionList[i];
        //     foreach (var answer in answerData)
        //     {
        //         if (sortingData[i].answer.ContainsKey(answer.detail.userAnswer[i]))
        //         {
        //             sortingData[i].answer[answer.detail.userAnswer[i]] += 1;
        //         }
        //         else
        //         {
        //             sortingData[i].answer[answer.detail.userAnswer[i]] = 1;
        //         }
        //     }
        // }
    }

    private void OnChange(object value)
    {
        dropdownIndex = (int)value;
    }
}
