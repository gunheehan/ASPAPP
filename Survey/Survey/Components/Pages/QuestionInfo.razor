@page "/form/questioninfo/{key}"
@using Newtonsoft.Json
@using Survey.Models
@using Survey.Repositories

@inject ISurveyRepository DbRepository

@rendermode InteractiveServer

@if (survey is null)
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H1">Loading.....</RadzenText>
    </div>
}

else
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H3">@title</RadzenText>
    </div>
    
    <RadzenTabs @bind-SelectedIndex=@selectedIndex>
        <Tabs>
            <RadzenTabsItem Text="Questions">
                <div class="row my-1">
                    <div class="col-sm-12 col-lg-12">
                        @foreach (var (question, index) in questionList.Select((q, idx) => (q, idx)))
                        {
                            <RadzenCard Style="margin-bottom: 2rem;">
                                <div class="question-card">
                                    <div class="question-header">
                                        <button class="btn-question-text" @onclick="@(() => ToggleEditQuestion(index))">
                                            Question @($"{index + 1}")
                                        </button>
                                    </div>
                                    @if (editingIndex == index)
                                    {
                                        <RadzenTextArea @bind-Value="editanswers[index]" Style="width: 100%" Placeholder="Enter your answer here..."/>
                                    }
                                    else
                                    {
                                        <RadzenText Text=@(editanswers[index]) TextStyle="TextStyle.H6"/>
                                    }
                                </div>
                            </RadzenCard>
                        }
                        <RadzenButton Text="Save All" Click="SaveAnswers" Style="margin-top: 2rem; margin-bottom: 4rem;"/>
                    </div>
                </div>
                </RadzenTabsItem>
            <RadzenTabsItem Text="Answers">
                <div class="row my-3">
                    @{
                        columIndex = 0;
                    }
                    <RadzenDataGrid @ref="answerGrid" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5"
                                    Data="@answers" TItem="SurveyAnswer">
                        <Columns>
                            <RadzenDataGridColumn TItem="SurveyAnswer" Title="No.">
                                <Template Context="survey">
                                    @{
                                        columIndex++;
                                    }
                                    @columIndex
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.Title)" Title="Title"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.Answers)" Title="Answers"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.CreateTime)" Title="CreateAt"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.UserId)" Title="Manager"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Total">
                Order Details
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}


@code {
    [Parameter]
    public string? key { get; set; }

    [SupplyParameterFromForm] private SurveyForm? survey { get; set; }
    [SupplyParameterFromForm] private IEnumerable<SurveyAnswer> answers { get; set; }
    
    RadzenDataGrid<SurveyAnswer> answerGrid;
    private int columIndex = 0;
    private int surveysCount;

    private string[] questionList;
    private List<string> editanswers = new List<string>();
    TabPosition tabPosition = TabPosition.Top;

    private string title = string.Empty;
    private int questionIndex = 0;
    private int selectedIndex = 0;
    private int? editingIndex = null; // Track which index is currently being edited

    protected override void OnInitialized()
    {
        selectedIndex = 0;
    }


    protected override async Task OnParametersSetAsync()
    {
        if (key is null)
            return;
        
        survey = await DbRepository.GetForm(key);

        questionList = JsonConvert.DeserializeObject<string[]>(survey.Questions);
        title = survey.Title;
        editanswers = new List<string>(questionList);
        answers = await DbRepository.GetAnswers(key);
    }
    
    private void ToggleEditQuestion(int index)
    {
        if (editingIndex == index)
        {
            // Clicked the already active card, toggle off editing
            editingIndex = null;
        }
        else
        {
            // Set the index of the card to be edited
            editingIndex = index;
        }
    }

    private void SaveAnswers()
    {
        // Here you can implement logic to save `editanswers` to your database or other storage
        Console.WriteLine("Answers have been saved:");
        foreach (string answer in editanswers)
        {
            Console.WriteLine(answer);
        }
        // Optionally clear the editing index after saving
        survey.Questions = JsonConvert.SerializeObject(editanswers);
        
        DbRepository.UpdateForm(survey);
        editingIndex = null;
    }
}