@page "/form/questioninfo/{key}"
@using Newtonsoft.Json
@using Survey.Models
@using Survey.Repositories

@inject ISurveyRepository DbRepository

@rendermode InteractiveServer

@if (survey is null)
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H1">Loading.....</RadzenText>
    </div>
}

else
{
    <div class="rz-p-12">
        <RadzenText TextStyle="TextStyle.H3">@title</RadzenText>
    </div>
    
    <RadzenTabs @bind-SelectedIndex=@selectedIndex>
        <Tabs>
            <RadzenTabsItem Text="Questions">
                <div class="row my-1">
                    <div class="col-sm-12 col-lg-12">
                        @foreach (var (question, index) in questionList.Select((q, idx) => (q, idx)))
                        {
                            <RadzenCard Style="margin-bottom: 2rem;">
                                <div>
                                    <div>
                                        <div class="clickable-text" @onclick="() => ToggleEditQuestion(index)">
                                            @($"지문 {index + 1}")
                                        </div>
                                    </div>
                                    @if (editingIndex == index)
                                    {
                                        <RadzenTextArea @bind-Value="editanswers[index]" Style="width: 100%" Placeholder="Enter your answer here..."/>
                                    }
                                    else
                                    {
                                        <RadzenText Text=@(editanswers[index]) TextStyle="TextStyle.H6"/>
                                    }
                                </div>
                            </RadzenCard>
                        }
                        <RadzenButton Text="질문지 변경" Click="SaveAnswers" Style="margin-top: 2rem; margin-bottom: 4rem; background-color: #007bff"/>
                    </div>
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Answers">
                <div class="row my-1">
                    <div class="col-sm-12 col-lg-12">
                        @foreach (SurveyAnswer answer in answers)
                        {
                            <RadzenCard Style="margin-bottom: 2rem;">
                                @{
                                    string[] answerData = JsonConvert.DeserializeObject<string[]>(answer.Answers);
                                    <RadzenText Text=@(answer.UserId) TextStyle="TextStyle.Body2" Style="margin-bottom: 1rem;"/>

                                    foreach (var answer in answerData)
                                    {
                                        <RadzenCard Style="margin-bottom: 2px;">
                                            <div>
                                                <RadzenText Text=@(answer) TextStyle="TextStyle.Body2"/>
                                            </div>
                                        </RadzenCard>
                                    }
                                }
                            </RadzenCard>
                        }
                    </div>
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Total">
                <div class="row my-3">
                    <RadzenDataGrid @ref="answerGrid" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5"
                                    Data="@answers" TItem="SurveyAnswer">
                        <Columns>
                            <RadzenDataGridColumn TItem="SurveyAnswer" Title="No.">
                                <Template Context="survey">
                                    @{
                                        var index = answers.ToList().IndexOf(survey) + 1;
                                    }
                                    @index
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.Title)" Title="Title"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.Answers)" Title="Answers"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.CreateTime)" Title="CreateAt"/>
                            <RadzenDataGridColumn Property="@nameof(SurveyAnswer.UserId)" Title="Manager"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
    
    <style>
        .clickable-text {
            cursor: pointer; /* 포인터 커서로 클릭 가능성을 나타냅니다. */
            color: black;  /* 링크 스타일을 위한 색상 */
            display: inline-block; /* 텍스트가 한 줄에 보이도록 설정 */
            font-weight: bold; /* 볼드체로 설정 */
            font-size: 1.2rem; /* 글씨 크기를 키움 */
            font-style: normal;
            transition: color 0.3s, background-color 0.3s; /* 색상과 배경 색상 변경 시 부드러운 전환 효과 추가 */
        }

        .clickable-text:hover {
            color: #0056b3; /* 마우스를 올렸을 때 텍스트 색상 변경 */
            background-color: rgba(0, 123, 255, 0.1); /* 배경색 추가하여 클릭 가능한 부분을 강조 */
            text-decoration: underline; /* 밑줄 유지 */
        }
    </style>
}


@code {
    [Parameter]
    public string? key { get; set; }

    [SupplyParameterFromForm] private SurveyForm? survey { get; set; }
    [SupplyParameterFromForm] private IEnumerable<SurveyAnswer> answers { get; set; }
    
    RadzenDataGrid<SurveyAnswer> answerGrid;
    private int surveysCount;

    private string[] questionList;
    private List<string> editanswers = new List<string>();
    TabPosition tabPosition = TabPosition.Top;

    private string title = string.Empty;
    private int questionIndex = 0;
    private int selectedIndex = 0;
    private int? editingIndex = null;

    protected override void OnInitialized()
    {
        selectedIndex = 0;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (key is null)
            return;
        
        survey = await DbRepository.GetForm(key);

        questionList = JsonConvert.DeserializeObject<string[]>(survey.Questions);
        title = survey.Title;
        editanswers = new List<string>(questionList);
        answers = await DbRepository.GetAnswers(key);
    }
    
    private void ToggleEditQuestion(int index)
    {
        if (editingIndex == index)
            editingIndex = null;
        else
            editingIndex = index;
    }

    private void SaveAnswers()
    {
        survey.Questions = JsonConvert.SerializeObject(editanswers);
        
        DbRepository.UpdateForm(survey);
        editingIndex = null;
    }
}